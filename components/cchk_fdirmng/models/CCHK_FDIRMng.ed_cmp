import "../../../dataclasses/CDRecovAction/models/CDRecovAction.ed_dclass";
import "../../../dataclasses/CDTMList/models/CDTMList.ed_dclass";
import "../../../dataclasses/CDTCDescriptor/models/CDTCDescriptor.ed_dclass";
import "../../../dataclasses/Pr_Time/models/Pr_Time.ed_dclass";
import "../../../dataclasses/CDEventList/models/CDEventList.ed_dclass";
import "../../../protocols/CPTMChannelCtrl/models/CPTMChannelCtrl.ed_prot";
import "../../../protocols/CPHK_FDIRCtrl/models/CPHK_FDIRCtrl.ed_prot";
import "../../../protocols/EDROOMTimingSAP/models/EDROOMTimingSAP.ed_prot";
import "../../../protocols/EDROOMServiceLibrary/models/EDROOMServiceLibrary.ed_prot";
import "../../../sais/icuasw_pus_services_iface_v1/models/icuasw_pus_services_iface_v1.ed_sai";
import "../../../sais/sc_channel_drv_iface_v1/models/sc_channel_drv_iface_v1.ed_sai";



/**
 * \class   CCHK_FDIRMng
 *
 */


proactive component CCHK_FDIRMng{

	uri := es.uah.aut.srg.edroom.mclev.cmp.CCHK_FDIRMng;
	version := v1;
	stack_size := 1024;
	def_max_nb_messages := 10;
	requires := icuasw_pus_services_iface(v1),
			sc_channel_drv_iface(v1);




	structure {

		ports {


			system port EDROOMsl
			{
				id:= 0;
				protocol:= EDROOMServiceLibrary(v1);
			};
			external port HK_FDIRCtrl {
				id := 1;
				cardinality := 1;
				protocol := CPHK_FDIRCtrl(v1);

			};

			conjugated  external port TMChannelCtrl {
				id := 2;
				cardinality := 1;
				protocol := CPTMChannelCtrl(v1);

			};

			timing port HK_FDIRTimer {
				id := 3;
				protocol := EDROOMTimingSAP(v1);

			};



		};


		data pools {
			CDTMList(v1) CEDROOMPoolCDTMList[10];
			CDRecovAction(v1) CEDROOMPoolCDRecovAction[10];

		};


	};


	behaviour {

		contexts {


			context Top_0{


				id := 0;


				variables {
					variable VCurrentTMList{
					 class := CDTMList(v1);

					 constructor := "";
					 dimension := 0;
					};
					variable VNextTimeout{
					 class := Pr_Time(v1);

					 constructor := "";
					 dimension := 0;
					};
					variable VCurrentRecAction{
					 class := CDRecovAction(v1);

					 constructor := "";
					 dimension := 0;
					};
					variable VCurrentEvList{
					 class := CDEventList(v1);

					 constructor := "";
					 dimension := 0;
					};


				};


				states {
					state I{
						id := 0;
					};
					state Ready{
						id := 1;
					};
				};


				init state := I;


				guards{

					/**
					 * \brief 
					 */

					guard GSendRecAction {
						<code>
						return (PUSService19::IsRecActQueueEmpty());


						</code>

					};


				};


				items{
					/**
					 * \brief  
					 */

					inform at FDoHK_FDIR {
						code {
							<code>
								 
								//Timing Service useful method
							 
								CDEventList eventList;
							 
								VNextTimeout+=Pr_Time(1,0);
								time=VNextTimeout;
								PUSService3::DoHK(VCurrentTMList);
								PUSService12::DoMonitoring(VCurrentTMList, VCurrentEvList);
								PUSService5::HandleEvents(VCurrentEvList, VCurrentTMList);
								PUSService19::QueueEventListRecAct(eventList);


							</code>
						};

						port :=HK_FDIRTimer;

						priority :=3;

					};

					/**
					 * \brief  
					 */

					msgdatahandler FExecHK_FDIR_TC {
						code {
							<code>
								
									// Data access
								
								CDEventList TCExecEventList;
								PUS_HK_FDIRTC::ExecTC(varSHK_FDIR_TC, VCurrentTMList, TCExecEventList);


							</code>
						};

						port :=HK_FDIRCtrl;

						message :=CPHK_FDIRCtrl(v1)::SHK_FDIR_TC;

					};

					/**
					 * \brief  
					 */

					inform at FInitHK_FDIR {
						code {
							<code>
								 
								//Timing Service useful methods
								 
								time.GetTime(); // Get current monotonic time
								time+=Pr_Time(1,0); // Add X sec + Y microsec
								VNextTimeout=time;


							</code>
						};

						port :=HK_FDIRTimer;

						priority :=3;

					};

					/**
					 * \brief  
					 */

					invoke FTxTMList {
						code {
							<code>
								
									// Complete Data 
								
								*pSTxTM_Data=VCurrentTMList;
								VCurrentTMList.Clear();


							</code>
						};

						port :=TMChannelCtrl;

						message :=CPTMChannelCtrl(v1)::STxTM;

						priority :=1;

					};

					/**
					 * \brief 
					 */

					action FGetNextRecAction {
						<code>
						PUSService19::GetNextRecAction(VCurrentRecAction);


						</code>

					};

					/**
					 * \brief 
					 */

					send FSendRecAction {
						code {
							<code>
							*pSRecAction_Data=VCurrentRecAction;


							</code>
						};

						port :=HK_FDIRCtrl;

						message :=CPHK_FDIRCtrl(v1)::SRecAction;

						priority :=3;

					};


				};


				choice points{
					choice point DoHK_FDIR{


						id := 0;


						branches{

							branch DoHK_FDIR_SendRecAction{
								id := 0;
								sink := Ready;


								actions := FGetNextRecAction;

								sends := FSendRecAction;

								guard := GSendRecAction;

							};


						};

						default branch DoHK_FDIR_NoRecAction{
							id := 1;
							sink := Ready;

						};
					};
				};


				transitions{

					transition Init{
						id := 0;
						source := I;
						sink := Ready;


						actions := FInitHK_FDIR;


						asynchronous trigger {
							port := EDROOMsl;
							message := EDROOMServiceLibrary(v1)::EDROOMStart;
						};
					};

					transition ExecTC{
						id := 1;
						source := Ready;
						sink := Ready;


						msgdatahandler := FExecHK_FDIR_TC;

						handshakes{
							handshake{
								invoke := FTxTMList;
							};
						};


						asynchronous trigger {
							port := HK_FDIRCtrl;
							message := CPHK_FDIRCtrl(v1)::SHK_FDIR_TC;
						};
					};

					transition DoHK_FDIR{
						id := 2;
						source := Ready;
						sink := DoHK_FDIR;


						actions := FDoHK_FDIR;

						handshakes{
							handshake{
								invoke := FTxTMList;
							};
						};


						asynchronous trigger {
							port := HK_FDIRTimer;
							message := EDROOMTimingSAP(v1)::EDROOMSignalTimeout;
						};
					};


				};


			};


		};

		top context := Top_0;


	};


};